#!/bin/bash

# Default configuration
# Directory for the symlink to the Hugo executable
BINDIR="/usr/local/bin"
# Version at which to stop downloads
STOP_VERSION="v0.84.0"
# Download Directory
DOWNLOAD_DIR="./executables"
# The GoHugo releases API URL
BASE_URL="https://api.github.com/repos/gohugoio/hugo/releases"

# Initialize flags to enforce exclusivity
download_flag=false
list_flag=false
link_flag=false

# Check if required dependencies (jq, curl, tar, rm, ln) are installed
check_dependencies() {
  local missing=0
  for cmd in jq curl tar rm ln; do
    if ! command -v "$cmd" &>/dev/null; then
      echo "Error: $cmd is not installed."
      missing=1
    fi
  done
  if [ "$missing" -ne 0 ]; then
    echo "Please install the required dependencies and try again."
    exit 1
  fi
}

# Display help message
show_help() {
  echo "Usage: $0 [OPTIONS]"
  echo ""
  echo "Options:"
  echo "  --download            Download only missing versions of Hugo."
  echo "  --list                List already downloaded Hugo versions."
  echo "  --version             Display the script version."
  echo "  --link                Create a symlink to a specified Hugo version in the BINDIR directory (requires sudo)."
  echo "  --bindir <directory>  Specify the directory for the Hugo symlink (default: /usr/local/bin)."
  echo "  --help                Display this help message."
}

# Show script version by reading package.json
show_version() {
  if [ -f "package.json" ]; then
    version=$(jq -r '.version' package.json 2>/dev/null)
    if [ "$version" != "null" ]; then
      echo "Script version: $version"
    else
      echo "Version not found in package.json."
    fi
  else
    echo "package.json not found."
  fi
}

# Function to list versions in the downloads folder
list_downloaded_versions() {
  echo "Downloaded Hugo versions:"
  if [ -d "$DOWNLOAD_DIR" ]; then
    find $DOWNLOAD_DIR -type f -name "hugo-*" | sed -E 's/.*\/hugo-([^-]+)(-extended)?$/\1\2/' | sort -uV
  else
    echo "No versions downloaded yet."
  fi
}

# Function to download and extract Hugo releases
download_releases_from_page() {
  local page_url="$1"
  local versions
  versions=$(curl -s "$page_url" | jq -r '.[].tag_name')
  host_url="https://github.com/gohugoio/hugo/releases/download"

  for version in $versions; do
    # Stop downloading if the specified version is reached
    if [[ "$version" == "$STOP_VERSION" ]]; then
      echo "Reached version $STOP_VERSION. Downloading and stopping further downloads."
      download_single_version "$version" "$host_url"
      return 1  # Signal to stop the outer loop in download_versions
    fi

    # Proceed with the download
    download_single_version "$version" "$host_url"
  done
  return 0
}

# Helper function to compare two versions using version sorting
version_ge() {
  # Returns 0 if $1 >= $2, else 1
  [[ "$(echo -e "$1\n$2" | sort -V | head -n 1)" == "$2" ]]
}

# Modified download_single_version function to handle different URL formats including v0.102.3
download_single_version() {
  local version="$1"
  local host_url="$2"
  local threshold_version="v0.102.0"
  local mid_version="v0.102.3"

  # Define paths for standard and extended executables
  local standard_file="$DOWNLOAD_DIR/hugo-$version.tar.gz"
  local extended_file="$DOWNLOAD_DIR/hugo-$version-extended.tar.gz"
  local standard_executable="$DOWNLOAD_DIR/hugo-$version"
  local extended_executable="$DOWNLOAD_DIR/hugo-$version-extended"

  # Determine URL format based on version comparison
  if [[ "$version" == "$mid_version" ]]; then
    # Format for version v0.102.3
    local standard_url="${host_url}/${version}/hugo_${version:1}_Linux-64bit.tar.gz"
    local extended_url="${host_url}/${version}/hugo_extended_${version:1}_Linux-64bit.tar.gz"
  elif version_ge "$version" "$mid_version"; then
    # Format for versions after v0.102.3
    local standard_url="${host_url}/${version}/hugo_${version:1}_linux-amd64.tar.gz"
    local extended_url="${host_url}/${version}/hugo_extended_${version:1}_linux-amd64.tar.gz"
  elif version_ge "$version" "$threshold_version"; then
    # Format for versions from v0.102.0 up to (but not including) v0.102.3
    local standard_url="${host_url}/${version}/hugo_${version:1}_Linux-64bit.tar.gz"
    local extended_url="${host_url}/${version}/hugo_extended_${version:1}_Linux-64bit.tar.gz"
  else
    # Format for versions up to v0.102.0
    local standard_url="${host_url}/${version}/hugo_${version:1}_Linux-64bit.tar.gz"
    local extended_url="${host_url}/${version}/hugo_extended_${version:1}_Linux-64bit.tar.gz"
  fi

  # Download standard version if it doesn't exist
  if [ -f "$standard_executable" ]; then
    echo "Skipping standard $version, executable already exists."
  else
    echo "Downloading standard Hugo $version from $standard_url..."
    curl -s -L -o "$standard_file" "$standard_url"

    echo "Extracting standard Hugo $version..."
    tar -xzf "$standard_file" -C "$DOWNLOAD_DIR" "hugo" && mv "$DOWNLOAD_DIR/hugo" "$standard_executable"
    rm "$standard_file"
  fi

  # Download extended version if it doesn't exist
  if [ -f "$extended_executable" ]; then
    echo "Skipping extended $version, executable already exists."
  else
    echo "Downloading extended Hugo $version from $extended_url..."
    curl -s -L -o "$extended_file" "$extended_url"

    echo "Extracting extended Hugo $version..."
    tar -xzf "$extended_file" -C "$DOWNLOAD_DIR" "hugo" && mv "$DOWNLOAD_DIR/hugo" "$extended_executable"
    rm "$extended_file"
  fi
}

# Function to download missing versions
download_versions() {
  echo "Downloading only missing versions of Hugo. Existing files will be skipped."
  mkdir -p "$DOWNLOAD_DIR"
  page_number=1
  while true; do
    page_url="${BASE_URL}?per_page=100&page=${page_number}"
    page_content=$(curl -s "$page_url")
    echo "Processing page $page_number..."

    if [ -z "$page_content" ] || [ "$page_content" == "[]" ]; then
      break
    fi

    if [[ "$page_content" == *"API rate limit exceeded"* ]]; then
      echo "API rate limit exceeded. Currently 60 unauthenticated requests per hour are allowed. Wait for 1h."
      break
    fi

    # Download releases from this page and stop if STOP_VERSION is reached
    if ! download_releases_from_page "$page_url"; then
      break
    fi
    ((page_number++))
  done
}

# Function to create a symlink for a specified version
link_version() {
  echo "This operation requires sudo access to create a symlink in $BINDIR."
  echo "Please ensure you understand the ramifications of using sudo."
  echo ""

  # Get the absolute path of the current directory
  curpath=$(pwd)

  # List unique version numbers without differentiating normal/extended versions
  available_versions=$(find $DOWNLOAD_DIR -type f -name "hugo-*" | sed -E 's/.*\/hugo-(v?[0-9]+\.[0-9]+\.[0-9]+)(-extended)?$/\1/' | sort -uV)
  latest_version=$(echo "$available_versions" | tail -n 1)

  echo "Available versions to link:"
  echo "$available_versions"

  # Prompt user to enter version, with the latest version preselected
  read -r -p "Enter the version you want to symlink (default is latest: $latest_version): " selected_version
  selected_version="${selected_version:-$latest_version}"

  # Ensure the version has the "v" prefix, as files are named with it
  normalized_version="hugo-${selected_version}"

  # Ask if the user wants the extended version or standard, defaulting to "Y" (extended)
  read -r -p "Do you want the extended version? (Y/n): " is_extended
  is_extended="${is_extended:-Y}"
  if [[ "$is_extended" =~ ^[Yy]$ ]]; then
    selected_executable="$curpath/$DOWNLOAD_DIR/${normalized_version}-extended"
  else
    selected_executable="$curpath/$DOWNLOAD_DIR/$normalized_version"
  fi

  # Check if the selected executable exists
  if [ ! -f "$selected_executable" ]; then
    echo "Error: Hugo version $selected_version${is_extended:+-extended} is not downloaded."
    exit 1
  fi

  # Remove existing symlink if it exists, then create a new one in the specified directory
  sudo rm -f "$BINDIR/hugo"
  sudo ln -s "$selected_executable" "$BINDIR/hugo"
  echo "Symlink created: $BINDIR/hugo -> $selected_executable"
}

# Main logic
check_dependencies

# Process arguments
if [[ $# -eq 0 ]]; then
  show_help
  exit 0
fi

while [[ $# -gt 0 ]]; do
  case "$1" in
    --help)
      show_help
      exit 0
      ;;
    --list)
      if $download_flag || $link_flag; then
        echo "Error: --list cannot be used with --download or --link."
        exit 1
      fi
      list_flag=true
      ;;
    --download)
      if $list_flag || $link_flag; then
        echo "Error: --download cannot be used with --list or --link."
        exit 1
      fi
      download_flag=true
      ;;
    --version)
      show_version
      exit 0
      ;;
    --link)
      if $download_flag || $list_flag; then
        echo "Error: --link cannot be used with --download or --list."
        exit 1
      fi
      link_flag=true
      ;;
    --bindir)
      shift
      BINDIR="$1"
      ;;
    *)
      echo "Invalid option: $1. Use --help for available options."
      exit 1
      ;;
  esac
  shift
done

# Execute the selected exclusive option
if $download_flag; then
  download_versions
elif $list_flag; then
  list_downloaded_versions
elif $link_flag; then
  link_version
fi
